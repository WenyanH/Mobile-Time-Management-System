package com.tms.controller;

import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.tms.controller.base.BaseController;
import com.tms.entity.User;
import com.tms.entity.tms.SchedulePeriod;
import com.tms.entity.tms.Schedule;
import com.tms.service.tms.TMSService;
import com.tms.utils.SessionUtils;

@Controller
@RequestMapping("/schedule")

public class ScheduleController extends BaseController<Object> {
	@Autowired
	private TMSService tmsService;	
	
	@RequestMapping("/list")
    public ModelAndView scheduleList(HttpServletResponse response, HttpServletRequest request)
            throws Exception {
    	ModelAndView view = scheduleListValue(response, request);
    	view.setViewName("tms/schedule/schedulelist");
        return view;
    }

    @RequestMapping("/list_nd")
	public ModelAndView scheduleListValue(HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		
		User user = SessionUtils.getUser(request);
		List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
		view.getModelMap().put("schedules", schedules);
		view.setViewName("tms/schedule/schedulelisttable");
		return view;
	}
    
    @RequestMapping("/create")
	public ModelAndView createSchedule(HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		view.getModel().put("ptype", SchedulePeriod.values());	
		User user = SessionUtils.getUser(request);
		List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
		view.getModelMap().put("schedules", schedules);
		view.setViewName("tms/schedule/saveschedule");
		return view;
	}
    
    @RequestMapping("/update")
	public ModelAndView updateSchedule(String id, HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		Schedule schedule = tmsService.findScheduleById(id);
		 if(schedule!=null){
		    	String scheduleID="";
		    	if(schedule.getName()!=null){
		    		scheduleID=schedule.getId();
		    	}		    	
		    	view.getModel().put("scheduleID", scheduleID);
		    }
		view.getModel().put("ptype", SchedulePeriod.values());		
		User user = SessionUtils.getUser(request);
		List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
		view.getModelMap().put("schedules", schedules);		
		view.getModel().put("schedule", schedule);
		view.setViewName("tms/schedule/saveschedule");
		return view;
	}
    
   @RequestMapping("/view")
   	public ModelAndView viewSchedule(String id, HttpServletResponse response, HttpServletRequest request) throws Exception {
   		ModelAndView view = new ModelAndView();	
   		Schedule schedule = tmsService.findScheduleById(id);
   		view.getModelMap().put("schedule", schedule);
   		return view;
   	}
       

    @RequestMapping("/save")
   	public ModelAndView saveSchedule(Schedule schedule, HttpServletResponse response, HttpServletRequest request)
   			throws Exception {
   		
   		ModelAndView view = new ModelAndView();
   		
   		try {

   			User user = SessionUtils.getUser(request);
   			schedule.setCompany(user.getCompany());
   			if (StringUtils.isEmpty(schedule.getId())) {
   				if (tmsService.validateScheduleCodeNameExist(schedule.getCode(), schedule.getName(), user.getCompany().getId())){
   					view.getModel().put("message", "exist");
   					return view;
   				} else {
   					tmsService.saveSchedule(schedule);
   				}
   			} else {
   				Schedule tmp = tmsService.findScheduleById(schedule.getId());
   				String code = null;
				String name = null;
   				if (tmp.getCode().equals(schedule.getCode()) && tmp.getName().equals(schedule.getName())){
   					tmsService.updateSchedule(schedule);
   				} else {
   					if (!tmp.getCode().equals(schedule.getCode())){
						code = schedule.getCode();
					}
					if (!tmp.getName().equals(schedule.getName())){
						name = schedule.getName();
					}
   					if (tmsService.validateScheduleCodeNameExist(code, name, user.getCompany().getId())){
   						view.getModel().put("message", "exist");
   						return view;
   					} else {
   						tmsService.updateSchedule(schedule);
   					}
   				}
   				
   			}

   			view.getModel().put("message", "success");

   		} catch (Exception e) {
   			e.printStackTrace();
   			view.getModel().put("message", "error");
   		}
   		
   		return view;
   		
   	}
    
    @RequestMapping("/delete")
   	public ModelAndView deleteSchedule(String ids, HttpServletResponse response, HttpServletRequest request)
   			throws Exception {
   		ModelAndView view = new ModelAndView();
   		
   		String[] scheduleIds = null;
   		Pattern pt = Pattern.compile(",");
   		scheduleIds = pt.split(ids);

   		for (String id : scheduleIds) {
   			tmsService.removeSchedule(id);
   		}
   		return view;
   	}
    
}
