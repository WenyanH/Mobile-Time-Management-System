package com.tms.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.tms.controller.base.BaseController;
import com.tms.entity.User;
import com.tms.entity.tms.SchedulePeriod;
import com.tms.entity.tms.Schedule;
import com.tms.entity.tms.ScheduleRule;
import com.tms.service.tms.TMSService;
import com.tms.utils.SessionUtils;
import com.tms.vo.ScheduleVo;
import com.tms.vo.ScheduleRuleVo;

@Controller
@RequestMapping("/schedule")

public class ScheduleController extends BaseController<Object> {
	@Autowired
	private TMSService tmsService;	
	
	@RequestMapping("/list")
    public ModelAndView scheduleList(HttpServletResponse response, HttpServletRequest request)
            throws Exception {
    	ModelAndView view = scheduleListValue(response, request);
    	view.setViewName("tms/schedule/schedulelist");
        return view;
    }

    @RequestMapping("/list_nd")
	public ModelAndView scheduleListValue(HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		
		User user = SessionUtils.getUser(request);
		if(user.getCompany()!=null){
			List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
			view.getModelMap().put("schedules", schedules);
		}
		view.setViewName("tms/schedule/schedulelisttable");
		return view;
	}
    
    @RequestMapping("/create")
	public ModelAndView createSchedule(HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		view.getModel().put("ptype", SchedulePeriod.values());	
		User user = SessionUtils.getUser(request);
		List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
		view.getModelMap().put("schedules", schedules);
		view.setViewName("tms/schedule/saveschedule");
		return view;
	}
    
    @RequestMapping("/update")
	public ModelAndView updateSchedule(String id, HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		Schedule schedule = tmsService.findScheduleById(id);
		 if(schedule!=null){
		    	String scheduleID="";
		    	if(schedule.getName()!=null){
		    		scheduleID=schedule.getId();
		    	}		    	
		    	view.getModel().put("scheduleID", scheduleID);
		    }
		view.getModel().put("ptype", SchedulePeriod.values());		
		User user = SessionUtils.getUser(request);
		List<Schedule> schedules = tmsService.findSchedules(user.getCompany().getId());
		view.getModelMap().put("schedules", schedules);		
		view.getModel().put("schedule", new ScheduleVo(schedule));
		view.setViewName("tms/schedule/saveschedule");
		return view;
	}
    
   @RequestMapping("/view")
   	public ModelAndView viewSchedule(String id, HttpServletResponse response, HttpServletRequest request) throws Exception {
   		ModelAndView view = new ModelAndView();	
   		Schedule schedule = tmsService.findScheduleById(id);
   		view.getModelMap().put("schedule", schedule);
   		return view;
   	}
       
	@RequestMapping("/fullcalendar")
   public void getFullcalendar(String id,HttpServletRequest request,HttpServletResponse response){
		Schedule schedule = tmsService.findScheduleById(id);
		try {
			if(schedule.getRules()!=null&&schedule.getRules().size()>0){
				List<ScheduleRuleVo> scheduleRuleVos=new ArrayList<ScheduleRuleVo>();
				for(ScheduleRule scheduleRule:schedule.getRules()){
					scheduleRuleVos.add(new ScheduleRuleVo(scheduleRule));
				}
				response.getWriter().write(toJson(scheduleRuleVos));
			}
			
		} catch (IOException e) {
			e.printStackTrace();				
		}
   }

    @RequestMapping("/save")
   	public ModelAndView saveSchedule(ScheduleVo scheduleVo, HttpServletResponse response, HttpServletRequest request)
   			throws Exception {
   		
   		ModelAndView view = new ModelAndView();
   		
   		try {
   			User user = SessionUtils.getUser(request);
   			
   			Schedule schedule=new Schedule();
   			if(StringUtils.isNotEmpty(scheduleVo.getId())){
   				schedule=tmsService.findScheduleById(scheduleVo.getId());
   				if(!scheduleVo.getName().equals(schedule.getName())){//name修改需要校验
   					if (tmsService.validateScheduleCodeNameExist(scheduleVo.getCode(), scheduleVo.getName(), user.getCompany().getId())){
   	   					view.getModel().put("message", "exist");
   	   					return view;
   	   	   			} 
   				}
   			}else{
   				if (tmsService.validateScheduleCodeNameExist(scheduleVo.getCode(), scheduleVo.getName(), user.getCompany().getId())){
	   					view.getModel().put("message", "exist");
	   					return view;
	   	   		} 
   			}
   			schedule.setCompany(user.getCompany());
   			if(StringUtils.isNotEmpty(scheduleVo.getCode())){
   				schedule.setCode(scheduleVo.getCode());
   			}
   			if(StringUtils.isNotEmpty(scheduleVo.getName())){
   				schedule.setName(scheduleVo.getName());
   			}
   			if(scheduleVo.getStartDate()!=null){
   				schedule.setStartDate(scheduleVo.getStartDate());
   			}
   			schedule.setActive(scheduleVo.isActive());
   			if(StringUtils.isNotEmpty(scheduleVo.getSchedulePeriod())){
   				schedule.setSchedulePeriod(SchedulePeriod.valueOf(scheduleVo.getSchedulePeriod()));
   			}
   			if(StringUtils.isNotEmpty(scheduleVo.getPeriod())){
   				schedule.setPeriod(scheduleVo.getPeriod());
   			}
   			schedule.setDiffPeriod(scheduleVo.getDiffPeriod());
   			if(StringUtils.isNotEmpty(scheduleVo.getDays())){
   				schedule.setDays(scheduleVo.getDays());
   			}
   			schedule.setAttribute(scheduleVo.isAttribute());
   			if (StringUtils.isEmpty(schedule.getId())) {
   				test(schedule);
   				tmsService.saveSchedule(schedule);
   			} else {
   				schedule.getRules().clear();
   				test(schedule);
   				tmsService.updateSchedule(schedule);
   			}
   			view.getModel().put("message", "success");

   		} catch (Exception e) {
   			e.printStackTrace();
   			view.getModel().put("message", "error");
   		}
   		
   		return view;
   		
   	}
    private void  test(Schedule schedule){
    	Set<ScheduleRule> rules =schedule.getRules();
    	ScheduleRule scheduleRule=new ScheduleRule();
    	scheduleRule.setName("scheduleRule");
    	scheduleRule.setDayStart(1);
    	scheduleRule.setDayEnd(1);
    	scheduleRule.setStartTime("2015-01-01T10:00:00");
    	scheduleRule.setEndTime("2015-01-01T12:00:00");
    	scheduleRule.setSchedule(schedule);
    	rules.add(scheduleRule);
    	schedule.setRules(rules);
    }
    @RequestMapping("/delete")
   	public ModelAndView deleteSchedule(String ids, HttpServletResponse response, HttpServletRequest request)
   			throws Exception {
   		ModelAndView view = new ModelAndView();
   		if(StringUtils.isEmpty(ids)){
			view.getModel().put("message", "error");
			return view;
		}
   		String[] scheduleIds = null;
   		Pattern pt = Pattern.compile(",");
   		scheduleIds = pt.split(ids);

   		for (String id : scheduleIds) {
   			tmsService.removeSchedule(id);
   		}
   		return view;
   	}
    
}
