package com.tms.controller;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.tms.controller.base.BaseController;
import com.tms.entity.User;
import com.tms.entity.tms.Job;
import com.tms.entity.tms.Task;
import com.tms.service.tms.TMSService;
import com.tms.utils.SessionUtils;
import com.tms.vo.JobVo;

	@Controller
	@RequestMapping("/job")

	public class JobController extends BaseController<Object> {
		
		@Autowired
		private TMSService tmsService;
		
		@RequestMapping("/list")
	    public ModelAndView jobList(HttpServletResponse response, HttpServletRequest request)
	            throws Exception {
	    	ModelAndView view = jobListValue(response, request);
	    	view.setViewName("tms/job/joblist");
	        return view;
	    }

	    @RequestMapping("/list_nd")
		public ModelAndView jobListValue(HttpServletResponse response, HttpServletRequest request)
				throws Exception {
			ModelAndView view = new ModelAndView();
			
			User user = SessionUtils.getUser(request);
			List<Job> jobs = tmsService.findAllJobs(user.getCompany().getId());
			view.getModelMap().put("jobs", jobs);
			view.setViewName("tms/job/joblisttable");
			return view;
		}
	    
	    @RequestMapping("/create")
		public ModelAndView createJob(HttpServletResponse response, HttpServletRequest request) throws Exception {
			ModelAndView view = new ModelAndView();
			User user = SessionUtils.getUser(request);
			List<Task> taskList = tmsService.findAllTasks(user.getCompany().getId());
			view.getModelMap().put("taskList", taskList);
			
			view.setViewName("tms/job/savejob");
			return view;
		}
	        
	    
	    @RequestMapping("/update")
		public ModelAndView updateJob(String id, HttpServletResponse response, HttpServletRequest request)
				throws Exception {
			ModelAndView view = new ModelAndView();
			Job job = tmsService.findJobByid(id);
			
//			if(job!=null){
//				String taskID="";
//				if(job.getTask()!=null){
//				taskID=job.getTask().getId();
//			    }
//				view.getModel().put("taskID", taskID);
//			}
			
			User user = SessionUtils.getUser(request);
			List<Task> taskList=tmsService.findAllTasks(user.getCompany().getId());
			view.getModelMap().put("taskList", taskList);	
			
			view.getModel().put("job", job);
			view.setViewName("tms/job/savejob");
			return view;
		}
	    
	    
	    @RequestMapping("/save")
		public ModelAndView saveJob(@RequestBody JobVo jobVo, HttpServletResponse response, HttpServletRequest request)
				throws Exception {
	    	
			ModelAndView view = new ModelAndView();
			
			Job job = new Job();
			Job tmp = new Job();
			if (StringUtils.isNotEmpty(jobVo.getId())){
				job =  tmsService.findJobByid(jobVo.getId());
				tmp.setCode(job.getCode());
				tmp.setName(job.getName());
				tmp.setPunchCode(job.getPunchCode());
			} else {
				job.setId(jobVo.getId());
			}
			
			job.setActive(jobVo.isActive());
			job.setCode(jobVo.getCode());
			job.setDescription(jobVo.getDescription());
			job.setName(jobVo.getName());
			job.setPunchCode(jobVo.getPunchCode());
			job.setUsePunchCode(jobVo.isUsePunchCode());
			
			
			try {

				User user = SessionUtils.getUser(request);
				job.setCompany(user.getCompany());
				
				Set<Task> task = new HashSet<>();
				if(jobVo.getTaskID()!=null){
					for (int i=0; i<jobVo.getTaskID().length;i++){
						task.add(tmsService.findTaskByid(jobVo.getTaskID()[i]));
					}
				}
				job.setTasks(task);
				
				if (StringUtils.isEmpty(job.getId())) {
					if (tmsService.validateJobCodeNamePunchCodeExist(job.getCode(), job.getName(), job.getPunchCode(), user.getCompany().getId())) {
						view.getModel().put("message", "exist");
						return view;
					} else {
						tmsService.saveJob(job);
					}
				} else {
					
					String code = null;
					String name = null;
					String punchCode = null;
					
					
					if (tmp.getCode().equals(job.getCode()) && tmp.getName().equals(job.getName()) && tmp.getPunchCode().equals(job.getPunchCode())){
						tmsService.updateJob(job);
					} else {
						if (!tmp.getCode().equals(job.getCode())){
							code = job.getCode();
						}
						if (!tmp.getName().equals(job.getName())){
							name = job.getName();
						}
						if (!tmp.getPunchCode().equals(job.getPunchCode())){
							punchCode = job.getPunchCode();
						}
						
						if (tmsService.validateJobCodeNamePunchCodeExist(code, name, punchCode, user.getCompany().getId())) {
							view.getModel().put("message", "exist");
							return view;
						} else {
							tmsService.updateJob(job);
						}
					}
					
				}

				view.getModel().put("message", "success");

			} catch (Exception e) {
				e.printStackTrace();
				view.getModel().put("message", "error");
			}
			
			
			return view;
			
		}
	    
	    @RequestMapping("/delete")
		public ModelAndView deleteJob(String ids, HttpServletResponse response, HttpServletRequest request)
				throws Exception {
			ModelAndView view = new ModelAndView();
			
			String[] jobIds = null;
			Pattern pt = Pattern.compile(",");
			jobIds = pt.split(ids);

			for (String id : jobIds) {
				tmsService.removeJob(id);
			}

			return view;
		}
}
