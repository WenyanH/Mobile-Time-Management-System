package com.tms.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import sun.misc.BASE64Encoder;

import com.tms.conditions.UserConditions;
import com.tms.constant.Constants;
import com.tms.controller.base.BaseController;
import com.tms.entity.Company;
import com.tms.entity.CompanyStructure;
import com.tms.entity.Department;
import com.tms.entity.Employee;
import com.tms.entity.Resource;
import com.tms.entity.ResourceType;
import com.tms.entity.Role;
import com.tms.entity.User;
import com.tms.entity.UserSource;
import com.tms.entity.UserStatus;
import com.tms.entity.tms.Job;
import com.tms.entity.tms.PayGroup;
import com.tms.entity.tms.Position;
import com.tms.entity.tms.TimeRounding;
import com.tms.service.company.CompanyService;
import com.tms.service.department.DepartmentService;
import com.tms.service.employee.EmployeeService;
import com.tms.service.resource.ResourceService;
import com.tms.service.role.RoleService;
import com.tms.service.tms.TMSService;
import com.tms.service.user.UserService;
import com.tms.utils.MD5;
import com.tms.utils.ProcessSignUtils;
import com.tms.utils.SessionUtils;
import com.tms.vo.UserVo;

@Controller
@RequestMapping("/user")
public class UserController extends BaseController<Object> {

	@Autowired
	private UserService userService;

	@Autowired
	private RoleService roleService;

	@Autowired
	private EmployeeService employeeService;

	@Autowired
	private DepartmentService departmentService;

	@Autowired
	private ResourceService resourceService;

	@Autowired
	private TMSService tmsService;
	
	@Autowired
	private CompanyService companyService; 	

	@RequestMapping("/list")
	public ModelAndView userList(UserConditions condition, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = userListValue(condition, response, request);
		view.setViewName("mydetail/user/userlist");
		return view;
	}

	@RequestMapping("/list_nd")
	public ModelAndView userListValue(UserConditions condition, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();

		User user = SessionUtils.getUser(request);
		if (user.getCompany() != null) {
			condition.setCompanyId(user.getCompany().getId());
			condition.setSource(UserSource.User);
			List<User> users = userService.findByConditions(condition);
			if (CollectionUtils.isNotEmpty(users)) {
				List<UserVo> userVos = new ArrayList<UserVo>();
				for (User tempUser : users) {
					userVos.add(new UserVo(tempUser));
				}
				view.getModelMap().put("users", userVos);
			}
		}
		view.setViewName("mydetail/user/userlisttable");
		return view;
	}

	@RequestMapping("/updatepassword")
	public ModelAndView updatePassword(String password, String oldPassword, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		if (StringUtils.isEmpty(oldPassword) && StringUtils.isEmpty(password)){
			view.setViewName("mydetail/user/updatepassword");
			return view;
		}
		
		User user = userService.findByUId(SessionUtils.getUser(request).getId());
		if (user.getPassword().equals(MD5.digest(oldPassword))){
			user.setPassword(MD5.digest(password));
			userService.update(user);
			view.getModelMap().put("message", "success");
		}else{
			view.getModelMap().put("message", "oldPasswordError");
		}
		
		return view;
	}

	/**
	 * 打开user创建页面,注意角色SUPERADMIN不显示
	 * 
	 * @param response
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/create")
	public ModelAndView createUser(HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		User loginUser = SessionUtils.getUser(request);
		
		List<Role> roleList = roleService.findAll();
		Role superAdmin = new Role();
		Role employee = new Role();
		for (Role role : roleList) {
			if (role.getName().equalsIgnoreCase(Constants.SUPER_ADMIN)) {
				superAdmin = role;
			}
			if (role.getName().equalsIgnoreCase(Constants.EMPLOYEE)) {
				employee = role;
			}
		}
		roleList.remove(superAdmin);
		roleList.remove(employee);
		
		view.getModelMap().put("roleList", roleList);

		List<String> userStatuses = new ArrayList<String>();
		for (UserStatus userStatus : UserStatus.values()) {
			userStatuses.add(userStatus.name);
		}
		view.getModelMap().put("userStatus", userStatuses);
		if(loginUser!=null&&loginUser.getCompany()!=null){
			Company company=companyService.findById(loginUser.getCompany().getId());
			Set<CompanyStructure> companyStructures= company.getCompanyStructure();
			for(CompanyStructure companyStructure:companyStructures){
				if(companyStructure.getIsActive()&&0==companyStructure.getLevel().getLevel()){
					view.getModelMap().put("structureName", companyStructure.getLabelName());
					break;
				}
			}
			List<Department> departments = departmentService.findAllDepartment(loginUser.getCompany().getId());// 获取同一个公司下的部门
			view.getModelMap().put("departments", departments);
		}
		//过虑掉了"/*"资源
		List<Resource> resources = getFilterResources();		
		if (CollectionUtils.isNotEmpty(resources)) {		      			
			view.getModelMap().put("resources", resources);
		}
		if(loginUser!=null&&loginUser.getCompany()!=null){
			List<Position> positionList = tmsService.findAllPosition(loginUser.getCompany().getId());
			List<Job> jobList = tmsService.findAllJobs(loginUser.getCompany().getId());
			List<PayGroup> paygroupList = tmsService.findAllPageGroups(loginUser.getCompany().getId());
			List<TimeRounding> timeRoundingList = tmsService.findAllTimeRoundingsByCompanyId(loginUser.getCompany().getId());

			List<Department> departmentList = departmentService.findAllDepartment(loginUser.getCompany().getId());
			view.getModelMap().put("positionList", positionList);
			view.getModelMap().put("jobList", jobList);
			view.getModelMap().put("paygroupList", paygroupList);
			view.getModelMap().put("timeRoundingList", timeRoundingList);
			view.getModelMap().put("departmentList", departmentList);
		}
		
		view.setViewName("mydetail/user/saveuser");
		return view;
	}
	
	/**
	 *  取得资源列表（去掉/*资源）
	 * @return  listResult
	 * @throws Exception
	 */
	private List<Resource> getFilterResources()throws Exception{
		List<Resource> listResult=resourceService.findAllResourceByType(ResourceType.URL);		
		if (CollectionUtils.isNotEmpty(listResult)) {
		        int size=listResult.size();		        
		        for(int i=0;i<size;i++){
		            if("/*".equals(listResult.get(i).getId())){
		            	listResult.remove(i);
		                i--;
		                size--;
		            }
		        }			
		}
		return listResult;
	}

	@RequestMapping("/update")
	public ModelAndView updateUser(String id, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		User loginUser = SessionUtils.getUser(request);
		List<Role> roleList = roleService.findAll();
		
		Role superAdmin = new Role();
		Role employee = new Role();
		for (Role role : roleList) {
			if (role.getName().equalsIgnoreCase(Constants.SUPER_ADMIN)) {
				superAdmin = role;
			}
			if (role.getName().equalsIgnoreCase(Constants.EMPLOYEE)) {
				employee = role;
			}
		}
		roleList.remove(superAdmin);
		roleList.remove(employee);
		
		view.getModelMap().put("roleList", roleList);
		Company company=companyService.findById(loginUser.getCompany().getId());
		Set<CompanyStructure> companyStructures= company.getCompanyStructure();
		for(CompanyStructure companyStructure:companyStructures){
			if(companyStructure.getIsActive()&&0==companyStructure.getLevel().getLevel()){
				view.getModelMap().put("structureName", companyStructure.getLabelName());
				break;
			}
		}
		List<Employee> employeeList = employeeService.findAllEmployee(loginUser.getCompany().getId());// 获取同一个公司下的雇员
		view.getModelMap().put("employeeList", employeeList);

		User user = userService.findByUId(id);
		view.getModel().put("user", user);

		Set<Department> userDepartments = user.getManagement();
		if (CollectionUtils.isNotEmpty(userDepartments)) {
			StringBuffer departmentStr = new StringBuffer();
			int index = 0;
			for (Department userDepartment : userDepartments) {
				departmentStr.append(userDepartment.getId());
				if (index < userDepartments.size() -1) {
					departmentStr.append(",");
				}
				index++;
			}
			view.getModelMap().put("userDepartments", departmentStr.toString());
		}
		

		if (user.getRoles() != null && user.getRoles().size() > 0) {
			view.getModelMap().put("roleId", user.getRoles().iterator().next().getId());
		}

		if (user.getEmployee().iterator().hasNext()) {
			view.getModelMap().put("employee", user.getEmployee().iterator().next());
		}

		List<Resource> resources = resourceService.findAllResourceByType(ResourceType.URL);
		if (resources != null && resources.size() > 0) {
			view.getModelMap().put("resources", resources);
		}

		if (user.getExportDevisions() != null && !"".equals(user.getExportDevisions())) {
			view.getModelMap().put("exportDevisions", user.getExportDevisions());
		}
		Department d = new Department();
		if (user.getEmployee().iterator().hasNext()){
			d = user.getEmployee().iterator().next().getDepartment();
		}
		
		view.getModelMap().put("employeeDepartment", d);
		
		view.setViewName("mydetail/user/saveuser");
		return view;
	}

	@RequestMapping("/updateStatus")
	public ModelAndView updateUserStatus(String id,
			HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		if (StringUtils.isNotEmpty(id)) {
		User user = userService.findByUId(id);
		view.getModelMap().put("user", user);
		}
		
		view.getModelMap().put("userStatus", UserStatus.values());
		view.setViewName("mydetail/user/updateuserstatus");
		return view;
	}

	@RequestMapping("/saveUserStatus")
	public ModelAndView saveUserStatus(User user, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		try {
			if (StringUtils.isNotEmpty(user.getId())) {
				User temp = userService.findByUId(user.getId());
				temp.setStatus(user.getStatus());
				userService.update(temp);
			}
			view.getModel().put("message", "success");
		} catch (Exception e) {
			e.printStackTrace();
			view.getModel().put("message", "error");
		}
		return view;
	}
	/**
	 * user绑定employee
	 * 
	 * @param userVo
	 * @param request
	 * @return
	 */
	private Employee getEmployee(UserVo userVo, HttpServletRequest request) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Employee employee = new Employee();
		try {
			User loginUser = SessionUtils.getUser(request);
			if (StringUtils.isNotEmpty(userVo.getEmployeeId())) {
				employee = employeeService.findById(userVo.getEmployeeId());
			}else{
				employee.setCompany(loginUser.getCompany());
			}
			if(StringUtils.isNotEmpty(userVo.getPhoto())){
				employee.setPhoto(userVo.getPhoto());
			}
			if (StringUtils.isNotEmpty(userVo.getJobNumber())) {
				employee.setJobNumber(userVo.getJobNumber());
			}
			//employee.setStatus(EmployeeStatus.Active);// 默认值
			if (StringUtils.isNotEmpty(userVo.getFirstName())) {
				employee.setFirstName(userVo.getFirstName());
			}
			if (StringUtils.isNotEmpty(userVo.getLastName())) {
				employee.setLastName(userVo.getLastName());
			}

			employee.setMiddleName(userVo.getMiddleName());

			if (StringUtils.isNotEmpty(userVo.getIrdNumber())) {
				employee.setIrdNumber(userVo.getIrdNumber());
			}
			if (StringUtils.isNotEmpty(userVo.getHireOnDateValue())) {
				Date hireOnDate = sdf.parse(userVo.getHireOnDateValue());
				employee.setHireOnDate(hireOnDate);
			}
			if (StringUtils.isNotEmpty(userVo.getClockId())) {
				employee.setClockId(userVo.getClockId());
			}
			if (StringUtils.isNotEmpty(userVo.getPayId())) {
				employee.setPayId(userVo.getPayId());
			}

			employee.setIsExport(userVo.getIsExport());

			if (StringUtils.isNotEmpty(userVo.getTerminateDateValue())) {
				Date terminateDate = sdf.parse(userVo.getTerminateDateValue());
				employee.setTerminateDate(terminateDate);
			}
			if (StringUtils.isNotEmpty(userVo.getDepartmentId())) {
				Department department = departmentService.findById(userVo.getDepartmentId());
				employee.setDepartment(department);
			}

//			if (StringUtils.isNotEmpty(userVo.getPositionId())) {
//				Position position = tmsService.findById(userVo.getPositionId());
//				employee.setPosition(position);
//			}

			if (StringUtils.isNotEmpty(userVo.getTimeRoundingId())) {
				TimeRounding timeRounding = tmsService.findTimeRoundingbyId(userVo.getTimeRoundingId());
				employee.setTimeRounding(timeRounding);
			}

			if (StringUtils.isNotEmpty(userVo.getPaygroupId())) {
				PayGroup paygroup = tmsService.findPayGroupById(userVo.getPaygroupId());
				employee.setPayGroup(paygroup);
//				if (userVo.getDailyHoursValue() == null) {
//					employee.setDailyHours(paygroup.getDailyHours());
//				}
			}

//			if (userVo.getDailyHoursValue() != null && userVo.getDailyHoursValue() > 0.0) {
//				employee.setDailyHours(userVo.getDailyHoursValue());
//			} else {
//				employee.setDailyHours(0.0);
//			}

//			if (StringUtils.isNotEmpty(userVo.getJobId())) {
//				Job job = tmsService.findJobByid(userVo.getJobId());
//				employee.setJob(job);
//			}
			if (StringUtils.isNotEmpty(userVo.getName())) {
				employee.setName(userVo.getName());
			}
			if (StringUtils.isNotEmpty(userVo.getTitle())) {
				employee.setTitle(userVo.getTitle());
			}
			if (StringUtils.isNotEmpty(userVo.getEmail())) {
				employee.setEmail(userVo.getEmail());
			}
			if (StringUtils.isNotEmpty(userVo.getMobile())) {
				employee.setMobile(userVo.getMobile());
			}
			if (StringUtils.isNotEmpty(userVo.getPhone())) {
				employee.setPhone(userVo.getPhone());
			}
			if (StringUtils.isNotEmpty(userVo.getFax())) {
				employee.setFax(userVo.getFax());
			}
			if (StringUtils.isNotEmpty(userVo.getPhysicalAddr())) {
				employee.setPhysicalAddr(userVo.getPhysicalAddr());
			}
			if (StringUtils.isNotEmpty(userVo.getPostalAddr())) {
				employee.setPostalAddr(userVo.getPostalAddr());
			}

		} catch (Exception e) {
		}
		return employee;
	}

	@RequestMapping("/save")
	public ModelAndView saveUser(@RequestParam(value = "fileUpload", required = false) MultipartFile file, UserVo userVo, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		User loginUser = SessionUtils.getUser(request);
		if(loginUser.getCompany()==null){
			view.getModel().put("message", "noCompany");
			return view;
		}
		if (file != null) {
			if (file.getSize() > 200000) {
				view.getModel().put("message", "photoBigError");
				return view;
			}
			String userPhoto = new BASE64Encoder().encode(file.getBytes());
			userVo.setPhoto(userPhoto);
		}
		
		Boolean userIsExist = userService.validateEmailExist(userVo.getEmail());
		User user = new User();
		if (StringUtils.isEmpty(userVo.getId())) {
			if (userIsExist) {
				view.getModel().put("message", "userEmailExit");
				return view;
			}
			if (userVo.getJobNumber() != null && employeeService.validateCodeExist(userVo.getJobNumber(), loginUser.getCompany().getId())) {
				view.getModel().put("message", "employeeNumerExit");
				return view;
			}
			user.setCompany(loginUser.getCompany());
		} else {
			user = userService.findByUId(userVo.getId());
			if (!user.getEmail().equals(userVo.getEmail()) && userIsExist) {
				view.getModel().put("message", "userEmailExit");
				return view;
			}
			Employee ey = new Employee();
			if (user.getEmployee().iterator().hasNext()){
				ey = user.getEmployee().iterator().next();
				if (StringUtils.isNotEmpty(ey.getJobNumber()) && !ey.getJobNumber().equals(userVo.getJobNumber())) {
					if (userVo.getJobNumber() != null && employeeService.validateCodeExist(userVo.getJobNumber(), loginUser.getCompany().getId())) {
						view.getModel().put("message", "employeeNumerExit");
						return view;
					}
				}
			}
			

			
		}

		user.setIsEmployee(userVo.getIsEmployee());
		user.setEmail(userVo.getEmail());
		user.setExportDevisions(userVo.getExportDevisions());
		
		try {
			Set<Role> roles = new HashSet<Role>();
			if (userVo.getRoleId() != null) {
				Role role = roleService.findById(userVo.getRoleId());
				if (role != null) {
					roles.add(role);
					user.setRoles(roles);
				}
			}

			if (userVo.getDepartments() != null) {
				Set<Department> departmentSet = new HashSet<Department>();
				for (String departmentId : userVo.getDepartments()) {
					Department department = departmentService.findById(departmentId);
					departmentSet.add(department);
				}
				user.setManagement(departmentSet);
			}

			if (userVo.getFuns() != null) {
				Set<Resource> resourceSet = new HashSet<Resource>();
				for (String resourceId : userVo.getFuns()) {
					Resource resource = resourceService.findById(resourceId);
					if (resource == null) {
						continue;
					}
					resourceSet.add(resource);
				}
				user.setResources(resourceSet);
			}

			// 这里得判断下吧，如果我部绑定employee的话，这步就不用了吧
			Employee employee = getEmployee(userVo,request);
			
			if (StringUtils.isEmpty(user.getId())) {
				user.setPassword(MD5.digest(userVo.getPassword()));//新建时密码必填项
				user.setCreateTime(new Date());
				user.setSys(false);
				employee.setUser(user);
				user.getEmployee().add(employee);
				user.setSource(UserSource.User);
				userService.save(user);
			} else {
				if(userVo.getChangePassword()!=null&&userVo.getChangePassword()){//编辑时需要判断PASSWROD是否选中修改
					user.setPassword(MD5.digest(userVo.getPassword()));
				}
				user.getEmployee().clear();
				employee.setUser(user);
				user.getEmployee().add(employee);
				user.setSource(UserSource.User);
				userService.update(user);
			}
			view.getModel().put("message", "success");
		} catch (Exception e) {
			e.printStackTrace();
			view.getModel().put("message", "error");
		}
		return view;
	}

	@RequestMapping("/delete")
	public ModelAndView deleteUser(String ids, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ModelAndView view = new ModelAndView();
		if(StringUtils.isEmpty(ids)){
			view.getModel().put("message", "error");
			return view;
		}
		//分割以","号连接的字符串成字符串数组
		String[] userIds = ProcessSignUtils.getInstance().processComma(ids);		
		for (String id : userIds) {
			User user=userService.findByUId(id);
			if(user!=null){
				if(!user.isSys()){//删除非系统用户
					userService.remove(user.getId());
				}
			}
		}
		view.getModel().put("message", "success");
		return view;
	}
}
