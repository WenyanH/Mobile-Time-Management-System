package com.tms.controller;

import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.tms.controller.base.BaseController;
import com.tms.entity.Employee;
import com.tms.entity.User;
import com.tms.entity.tms.Leave;
import com.tms.entity.tms.PayType;
import com.tms.service.employee.EmployeeService;
import com.tms.service.leave.LeaveService;
import com.tms.service.tms.TMSService;
import com.tms.utils.SessionUtils;

@Controller
@RequestMapping("/leave")

public class LeaveController extends BaseController<Object> {
	@Autowired
	private LeaveService leaveService;
	
	@Autowired
	private TMSService tmsService;
	
	@Autowired
	private EmployeeService employeeService;
	
	@RequestMapping("/list")
	public ModelAndView leaveList(HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = leaveListValue(response, request);
		view.setViewName("empschedule/leave/leavelist");
		return view;
	}
	
	@RequestMapping("/list_nd")
	public ModelAndView leaveListValue(HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		
		User user = SessionUtils.getUser(request);
		List<Leave> leaves =leaveService.findLeaves(user.getCompany().getId());
		view.getModelMap().put("leaves", leaves);
		view.setViewName("empschedule/leave/leavelisttable");
		return view;
	}
	
	@RequestMapping("/create")
	public ModelAndView createLeave(HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		User user = SessionUtils.getUser(request);
		List<Employee> employeeList = employeeService.findAllEmployee(user.getCompany().getId());
		view.getModelMap().put("employeeList", employeeList);
		
		List<PayType> paytypeList=tmsService.findPayTypes(user.getCompany().getId());
		view.getModelMap().put("paytypeList", paytypeList);
		
		view.setViewName("empschedule/leave/saveleave");
		return view;
	}
	
	@RequestMapping("/update")
	public ModelAndView updateLeave(String id, HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		Leave leave = leaveService.findById(id);
	    if(leave!=null){
	    	String typeID="";
	    	if(leave.getPayType()!=null){
	    		typeID=leave.getPayType().getId();
	    	}
	    	String employeeID="";
	    	if(leave.getEmployee()!=null){
	    		typeID=leave.getEmployee().getId();
	    	}
	    	view.getModel().put("typeID", typeID);
	    	view.getModel().put("employeeID", employeeID);
	    }
	    
	    User user = SessionUtils.getUser(request);
		List<Employee> employeeList = employeeService.findAllEmployee(user.getCompany().getId());
		view.getModelMap().put("employeeList", employeeList);		
		List<PayType> paytypeList=tmsService.findPayTypes(user.getCompany().getId());
		view.getModelMap().put("paytypeList", paytypeList);		
		view.getModel().put("leave", leave);
		view.setViewName("empschedule/leave/saveleave");
		return view;
	}
	
	@RequestMapping("/save")
	public ModelAndView saveLeave(Leave leave, String typeID, String employeeID,HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		
		ModelAndView view = new ModelAndView();
		try {

			User user = SessionUtils.getUser(request);
			leave.setCompany(user.getCompany());
			
			if(StringUtils.isNotEmpty(employeeID)){
				Employee employee=employeeService.findById(employeeID);
				leave.setEmployee(employee);
				employee.getLeave().add(leave);
			}
			if(StringUtils.isNotEmpty(typeID)){
				PayType payType=tmsService.findPayTypeById(typeID);
				leave.setPayType(payType);	
				payType.getLeave().add(leave);
			}
			
			if (StringUtils.isEmpty(leave.getId())) {
				if (leaveService.validateCodeExist(leave.getEmployee().getId(), user.getCompany().getId())) 
				{
			    	view.getModel().put("message", "exist");
					return view;
				} else {
					leaveService.save(leave);
				}
			  } 
		
			else {
				Leave tmp = leaveService.findById(leave.getId());
				if (tmp.getEmployee().getId().equals(leave.getEmployee().getId())){				
					leaveService.update(leave);
				} 
				else {
					if (leaveService.validateCodeExist(leave.getEmployee().getId(), user.getCompany().getId())) 
					{
						view.getModel().put("message", "exist");
						return view;
					} else {
						leaveService.update(leave);
					}
				}
			}
			view.getModel().put("message", "success");

		} catch (Exception e) {
			e.printStackTrace();
			view.getModel().put("message", "error");
		}
		
		
		return view;
		
	}
	

	@RequestMapping("/delete")
	public ModelAndView deleteLeave(String ids, HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		ModelAndView view = new ModelAndView();
		
		String[] leaveIds = null;
		Pattern pt = Pattern.compile(",");
		leaveIds = pt.split(ids);

		for (String id : leaveIds) {
			leaveService.remove(id);
		}
		return view;
	}
	
}
